1. npx create-react-app material-ui-react

2. open the app in vs code
3. open terminal > 
    npm install @material-ui/core
    see https://material-ui.com/
    see it added to package.json
4. npm start (to start/testrun the app)
5. open App.js
    we don't need the link, and p, so delete 
    that leaves judt the react logo
6. import the button from @material-ui/core
        import Button from "@material-ui/core/Button";
    - add it to the classname Header, just above <img>
        <Button>Hello World</Button>
    see it showing in the ui
    https://material-ui.com/components/buttons/#contained-buttons

    - add to button <Button variant="contained">Hello World</Button>
    See the changes in the btn in the browser
    - add color to the btn
        <Button variant="contained" color="primary">Hello World</Button>  // can also be secondary
    - we can make the btn a linkable by adding href="#" or whatever to the btn
    - Or add a click listener to the button by adding onClick={() => alert('Hello World!")}
    - we can change the size of the btn to small by adding
            size="small" or "large"
    - we can also add disable to the btn which disables and make the btn unclickable
            disabled
    - To add our own custom style we can do something like
            style={{
                fontSize: 400; or whatever
            }}
    - to add icons on the btns, install as ff
            npm install @material-ui/icons
7. add the icons to the btn
        startIcon={<SaveIcon />} // this adds an icon to the left of the btn
        endIcon = { < SaveIcon / > } // this adds an icon to the right of the btn
8. then import SaveIcon passing in @material-ui/icon/Save
        import SaveIcon from @material-ui/icon/Save

9. To create a btn group, we 1st have to import the btn group
       - import ButtonGroup from @material-ui/core/ButtonGroup
       - wrap our btns inside the btn group
        <ButtonGroup>
                <Button>
                        ......
                        color="primary"
                        Save
                </Button>
                <Button>
                        ......
                        color="secondary"
                        Discard
                </Button>
        </ButtonGroup>

10. Import a DeleteIcon 
        - import DeleteIcon from @material-ui/icon/Save

     change the second btn icon to use the delete icon
        - startIcon = { < DeleteIcon / > }  // for icon on left of btn OR
        - endIcon = { < DeleteIcon / > }    // for icon on right of btn 

11. Since we are using a btn group, we can move some of the styles there for uniformity/ less codes
        <ButtonGroup 
        variant = "contained"
        color = "primary"
        size = "large" >
                <Button 
                startIcon = { < SaveIcon / > } >
                Save 
                </Button> 

                <Button 
                endIcon = { < DeleteIcon / > } >
                Discard 
                </Button> 
        </ButtonGroup>

12. Now let's add check box
        1st import checkbox from material ui
                import { Checkbox } from '@material-ui/core/Checkbox';
        2nd create a func for checkbox above App func
                function CheckboxExample() {
                        return ( 
                                <div >
                                        Test 
                                </div>
                        )
                }
13. Add the CheckboxExample func above the ButtonGroup in the App() func
        function App() { 
                return (
                        //-------------
                        <CheckboxExample / >
                        <ButtonGroup ......>
                        //----------
                )
        }
        Refresh and see Test displayed above the btns

14. Update the CheckboxExample func. by adding a <checkbox> to the func return statement
 and declare a state above the return statement
        function CheckboxExample() {
                const [checked, setChecked] = React.useState(true)
                return ( 
                        <Checkbox
                        checked={checked}
                        onChange={(e) => setChecked(e.target.checked)}

                        // we can add other props like
                        color = "primary" or
                        disabled   // this disables the checkbox

                        // there are wrappings in checkbox so it is advisable to add additional props in "inputProps" like

                        inputProps={{
                            'aria-label': 'secondary checkbox'    
                        }}
                        />   
                )
        }
15. To add label to our checkboxes, 
  import a FormControlLabel from material ui
        import FormControlLabel from '@material-ui/core/FormControlLabel';
  Then wrap a <FormControlLabel> around the <checkbox>
  We will not wrap it as a child
        <FormControlLabel></FormControlLabel>
  But as a props
        <FormControlLabel
               control= {<Checkbox
                        checked={checked}
                        onChange={(e) => setChecked(e.target.checked)}

                        color = "primary" or
                        disabled   // this disables the checkbox

                        inputProps={{
                            'aria-label': 'secondary checkbox'    
                        }}
                        />
               }  
               label="Testing CheckboxExample"
        />
        
16. We can use the checkbox for save and delete by
        - create the icons as props in the FormControlLabel
                icon={<DeleteIcon />}
                checkedIcon={<SaveIcon />}
17. Now let's add some txtfields
        - import textfeild from material ui
                import TextField from '@material-ui/core/TextField';
        - place the text TextField above our checkbox
                <TextField / >
            <CheckboxExample / >
        See it in the browser, the text is black and we are using a dark bakground 
        - Open App.css > add a style to this and override anything placed from the default library by adding "important"
                input {
                        color: white !important;
                }
        See now that the text entered is white
         
18. We can also add other props to our <TextField>
        <TextField
        variant="outline"  // others: outline, standard
        color="secondary"
        type="date" // can also use "time", "email"....
        label="Date Is"
        value="test@test.com" // for set value like email
        placeholder="test@test.com" // we can use "placeholder" instead
         />
19. We can add our own custom style as usual
        - import makeStyle from materialui
                import {makeStyle} from '@material-ui/core/styles';
        - create a const useStyle above the CheckboxExample func which we can ref later
        const useStyle = makeStyles({
                root: {
                        background: 'linear-gradient(45deg, #333, #999)',
                        border: 0,
                        borderRadius: 15,
                        color: 'white',
                        padding: '0 30px'
                }
        })

        - Create a func below useStyle() to use the style
                function ButtonStyled() {
                        const classes = useStyle(); // call the useStyle here
                        return <Button className={classes.root}>Test Styled Button</Button>
                }
        - now create the class ButtonStyled in func App just above the TextField
                <ButtonStyled />
        Now refresh and see our ButtonStyled in the browser
        - we can add more style to that as needed:
                root: {
                        background: 'linear-gradient(45deg, #fe6bbb, #ff8e53)',
                        border: 0,
                        marginBottom: 15,
                        borderRadius: 15,
                        color: 'white',
                        padding: '30px 30px'
                }

20. We can also redesign the themes with theme provider which will actually work as a parent
        - add themeProvider to the style import statement
                import { makeStyles, ThemeProvider } from '@material-ui/core/styles';
        - wrap the ThemeProvider around all the content of the function App return() so that it is available to all to use
                <ThemeProvider>
                        <div className="App">
                        //--other contentents----
                        </div>
                <ThemeProvider>
        - themeProvider requires a theme which we can customize, add the theme as
                <ThemeProvider theme={theme}>
        - we have to define this theme using another theme, add createMuiTheme to the style import
                import { makeStyles, ThemeProvider, createMuiTheme } from '@material-ui/core/styles';
 
        - claa the createMuiTheme in a const class just below the const useStyles
                const theme = createMuiTheme({
                        palette: {  // def a palette for our primary color
                                primary:  {
                                        main: orange[500], // def a main color orange with 500 weight
                                }
                        }
                })
        - Now import "orange" from material ui
                import { orange } from '@material-ui/core/colors';

        We can use any color we like in the import and change the palette to that color and it will work:
                import { green } from '@material-ui/core/colors';
                
                main: green[500],  // in palette will work too
        - we can also def a secondary color and add it to the palette
                import { green, orange } from '@material-ui/core/colors';
                
                 palette: {  // def a palette for our primary color
                                primary:  {
                                        main: green[500], 
                                },
                                secondary:  {
                                        main: orange[400], // def a main color orange with 400 weight
                                }
                                
                        }
We can also do some nesting here. Read more in the documentation

21. Topography: Font Sizes
        - To use the default roboto font size, we need to first install it
                npm install add fontsource-roboto
        - Then import it 
                import 'fontsource-roboto';
        
        - import typography from material ui
                import Typography from '@material-ui/core/Typography';
        - Now let's put it at the head of our app in App.js func App() above the ButtonStyled
                <Typography>
                        Welcome to Material UI
                </Typography>
        - We can now add a variant to our Typography
                <Typography variant="h2">
                        Welcome to Material UI
                </Typography>
        -  We can create another with a variant of h3 and text
                <Typography variant = "h3" >
                        Lear how to use Material UI 
                </Typography> 
                other variants can be h3,----, subtitle1,----, body1...... etc
        - In DevTools we see that our typography is an h6, we can turn it into a div by adding "component" = "div" as ff:
                <Typography variant = "h3" component="div">
        - If we want to, we can also customize the theme of our typography
                > jump to our const them > create some custom sizings
                > add typography as an obj
                typography {
                        h2: {
                                fontSize: 18, // adjust the size to fit
                                marginBottom: 16, //we can add other things like margin, padding, etc
                        }
                }
22. Creating containers, grids and general layouts
        - import container from material ui
                import Container from '@material-ui/core/Container';

        - Then place it inside our function App() using it to wrap other contentents
                <Container>
                        <div className="App">
                                //other contents
                        </div>
                </Container>
        This adds a little bit of padding to the sides, we can add ours

        - let's add a maxWidth to our container
                <Container maxWidth="sm"> // sm means small, md - medium, lg  -  large, xs - mobile size
23. we can do many other things with material ui.
    Let's create a grid
    - import paper and grid from materialui so we can create some paper components inside our grid
        import Paper from '@material-ui/core/Paper';
        import Grid from '@material-ui/core/Grid';

    - add the Grid to the func App() just below the <ButtonStyled> like so
        we can also remobe the TextField
                <Grid>
                        <Paper /> // add a paper component
                </Grid>
        A Grid can be either a "Container" or an "item". Lets make this an a Grid "item" inside a Grid Container
                <Grid container>
                        <Grid item>
                                <Paper style={{ height:75, width:50, }} /> // add a paper component
                        </Grid>
                </Grid>
        Create multiple to see how it works
        - we can now add spacing and other styling to our Grid Container like so
                <Grid container spacing={2} justify="center">
24. Make it responsive. For this we shall apply our responsive design directly inside our grid components
        if we want our grid item xs to span 12 rows we just do 
        <Grid item xs={12}>
                <Paper style={{ height:75, width:100%, }} /> //if we waant it to take the whole width
        </Grid>

        if we want xs to span 3 and sm to span 6 spaces
        <Container maxWidth = "xs" >
                <div className = "App">
                <header className = "App-header" >
                <Typography variant = "h2" component = "div">
                        Welcome to Material UI 
                </Typography>   
                <Typography variant = "subtitle1" >
                        Learn how to use Material UI < /Typography> 
                <ButtonStyled />
                <Grid container spacing = { 2 } justify = "center" >
                        <Grid item xs={3} sm={6}> // if we want to span 3 spacing (12 is the highest), medium sm to span 6 spacing
                                < Paper style = {{ height: 75, width: 100%, }} />   // if we want it to take the whole available width
                        </Grid >
                        <Grid item xs={3} sm={6}>
                                <Paper style = {{ height: 75, width: '100%', }} />   
                        </Grid >
                        <Grid item xs={3} sm={6}>
                                <Paper style = {{ height: 75, width: '100%', }} />   
                        </Grid >
                        <Grid item xs={3} lg={12}>
                                <Paper style = {{ height: 75, width: '100%', }}/>   
                        </Grid >

                        // more codes
                </Grid>  
                </div>
        </container>
25. if we want the layout to dynamically respond depending on the viewport we are on, 
        we can just pass it like xs and it will utilize as much space as it can on the viewport

        <Grid container spacing = { 2 } justify = "center" >
                        <Grid item xs> // if we want to span 3 spacing (12 is the highest), medium sm to span 6 spacing
                                < Paper style = {{ height: 75, width: 100%, }} />   
                        </Grid >
                        <Grid item xs>
                                <Paper style = {{ height: 75, width: '100%', }} />   
                        </Grid >
                        <Grid item xs>
                                <Paper style = {{ height: 75, width: '100%', }} />   
                        </Grid >
                        <Grid item xs>
                                <Paper style = {{ height: 75, width: '100%', }}/>   
                        </Grid >

                        // more codes
        </Grid>  
We are going to leave it at 3 units to have some space around
        x={3}         
 26. There are many premade components that we can use in material ui,
        let's use one of them - the app bar at the top of our site.
        - import appBar from material ui
                import AppBar from '@material-ui/core/AppBar';
        - That will need a few other things like a toolbar, icon btn and menu icon so import those too
                import Toolbar from '@material-ui/core/Toolbar';
                import IconButton from '@material-ui/core/IconButton';
                import MenuIcon from '@material-ui/core/Menu';
        - Now lets add these to the top of our App func
                <header className="App-header">
                        <AppBar>
                                <Toolbar>
                                        <IconButton>
                                                <MenuIcon />
                                        </IconButton>
                                </Toolbar>
                        </AppBar>

                // Let's also add a Typography and a Button
                <Typography variant="H6">
                        MUI Theming
                </Typography>
                <Button> Login</Button>
                        //----------------
                </header>
        - We can customize our styling to AppBar as any other things
                <AppBar color="secondary">

27. Finally we can remove the "palette" we defined in our theme and use the default (optional)
28. And Add some padding to out App to get a better layout
        > App.css 
        > .App {
                text-aligned: 'center';
                margin-top: 55px;
        }
        There are a lot of designs we can use with React and Material UI



source: https://material-ui.com/components/buttons/#contained-buttons
         https://material-ui.com/components/icons/#installation
